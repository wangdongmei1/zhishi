angular 自定义指令

1. 指令可以是一个模板  (用来提取多次复用的dom结构[html] 我们称之为 组件)

2. 也可是一个功能 (用来提取多次复用的 function[js] )

3. api
        angular.module('app',[])
               .directive('directive',[function(){
                    return{  //返回 object 或者 function
                            restrict:'ECMA',
                            replace:true,
                            tepmlate:'<div>自定义指令</div>',
                            scope:{
                                a:'=',
                                b:'@',
                                c:'&'
                            },
                            controller:[function(){

                            }],
                            controllerAs:'controllerName',
                            link:function(scope,element,attribue){

                            },
                            compile:function(){
                                return {
                                    pre:function(scope,element,attribue){

                                    },
                                    post:function(scope,element,attribue){

                                    }
                                }
                            }
                    }
               }])
replace

默认是false

如果为true 将替换掉元素的 内容
restrict

type : string

E element         <directivename></directivename>   
C class           <tagname class='directivename'><tagname>
M 注释             <!-- directive: directivename -->  1. replace true 2.按格式
A attribute        <tagname directivename></tagname>  例子: <div directivename></div>
template

type : string / function

string : '<div>自定义指令</div>'  (html 元素模板 一个字符串)
templateUrl

type : string / function

string : './directive.html'    (html 元素模板 一个单独的html文件)
scope

scope 默认值是 false

scope : boolean / object

如果是   false 那么 将不新建自己的scope 使用 父元素的scope
如果是   true  那么 新建自己的scope 并且继承 父级的scope

如果是对象 那么新建自己的scope 并且 按你的意思来集成父元素的scope的某些属性或者一个都不继承 或者 单向绑定 或者 双向绑定

{
    a:'=',     // =  是双向绑定的意思
    b:'@'      // @  是单向绑定的意思
    c:'&'      // &  传递function的  传递的时候需要 调用一下 然后呢 使用的时候也要调用一下
}
compile

他和link 的功能相似 但是 更加强大和复杂

compile 顾名思义 是编译dom的

就是说 我们含有angular指令的dom 不能直接绑定到 dom 数上去


他有三个阶段

    1. 预编译  return 之前

    2. prelink 就是说当他在编译自己的时候触发的 如果在这个过程中 他发现了子指令那么接下来会运行子指令的 prelink 如此一直进行到最后一个子指令 pre 阶段完成

    3. 当prelink 完成之后 会 从最后一个子指令的 postlink开始执行 让后依次向上执行postlink 直到 最大的父指令 完成 postlink 此时compile 结束 (可以在即将结束之前 把postlink当作 link 使用 故 link被屏蔽)
link

他提供了一个 修改dom的机会 在dom绑定到 dom树 之前

function(scope,element,attribute){

}

//compile 存在的时候会被屏蔽
controllerAs

给匿名控制器命名

可以将数据挂载在这个别名上 再改控制器里面通过 this.attribute = $scope.data 来挂载